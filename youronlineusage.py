# -*- coding: utf-8 -*-
"""YourOnlineUsage.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1bJpTQsTgiNZOfmFH4LaCa1IKCJ6f7Xgc
"""

import pandas as pd
import seaborn as sns
import matplotlib.pyplot as plt
import plotly.express as px

# Load the Excel file
file_path = 'Online Usage.xlsx'
df = pd.read_excel(file_path)

# Convert 'Sum' from minutes to hours for both visualizations
df['Hours'] = df['Sum'] / 60  # Convert minutes to hours

# Set a custom Seaborn style
sns.set_style("whitegrid")
plt.rcParams.update({
    "axes.facecolor": "#f5f5f5",
    "axes.edgecolor": "white",
    "axes.linewidth": 1.5,
    "grid.color": "white",
    "grid.linestyle": "-",
    "grid.linewidth": 1,
    "xtick.color": "gray",
    "ytick.color": "gray",
    "xtick.labelsize": 12,
    "ytick.labelsize": 12,
    "font.size": 14,
    "axes.titlesize": 16,
    "axes.titleweight": "bold",
    "legend.fontsize": 12,
    "legend.title_fontsize": 14,
})

# Visualization 1: Lollipop Chart for Total Daily Usage per App in Hours
fig = px.scatter(df.sort_values('Hours', ascending=False),
                 x='Hours', y='App', size='Hours', color='App', orientation='h',
                 title='âœ¨ Total Daily Usage in Hours per App (Sample of 81 Students) âœ¨',
                 template='plotly_white', color_continuous_scale='Viridis')

fig.update_traces(marker=dict(line=dict(width=2, color='DarkSlateGrey')),
                  selector=dict(mode='markers'))

fig.update_layout(
    height=1000,
    width=800,
    title_font_size=20,
    title_x=0.5,
    title_y=0.95,
    title_xanchor='center',
    title_yanchor='top',
    font_family="Arial",
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)',
    xaxis=dict(gridcolor='rgba(255,255,255,0.1)', title='Total Daily Usage (Hours)'),
    yaxis=dict(gridcolor='rgba(255,255,255,0.1)', title='App'),
    showlegend=False
)

fig.show()

# Filter the top 6 apps by highest daily usage for the scatter plot
top_6_usage = df.nlargest(6, 'Sum').sort_values('Sum', ascending=False)  # Sort from highest to lowest

# Visualization 2: Scatter Plot of Number of Users vs. Total Daily Usage for Top 6 Apps in Hours
plt.figure(figsize=(12, 8))
scatter_plot = sns.scatterplot(x='Count', y='Hours', hue='App', data=top_6_usage, palette='Set2', edgecolor="black", linewidth=0.8)

# Sort legend from highest to lowest based on usage
handles, labels = scatter_plot.get_legend_handles_labels()
order = [labels.index(app) for app in top_6_usage['App']]
scatter_plot.legend(handles=[handles[idx] for idx in order], labels=[labels[idx] for idx in order], bbox_to_anchor=(1.05, 1), loc='upper left', title='App', fontsize=10, title_fontsize=12)

plt.title('Number of Users vs. Total Daily Usage of Top 6 Apps in Hours (Sample of 81 Students)', fontsize=18, weight='bold')
plt.xlabel('Number of Users', fontsize=14, weight='bold')
plt.ylabel('Total Daily Usage (Hours)', fontsize=14, weight='bold')
plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

"""Image Attempt"""

import matplotlib.pyplot as plt
import seaborn as sns
from matplotlib.offsetbox import OffsetImage, AnnotationBbox

# Load the Excel file
file_path = 'Online Usage.xlsx'
df = pd.read_excel(file_path)

# Load the new images
logos = {
    'Youtube': '317714_video_youtube_icon.png',
    'Messages ': '7763765_messaging_messages_icon.png',
    'Snapchat': '4102574_applications_media_snapchat_social_icon.png',
    'Instagram': '1298747_instagram_brand_logo_social media_icon.png',
    'TikTok': '7024783_tiktok_social media_icon.png',
    'Netflix': '4375011_logo_netflix_icon.png'
}

# Filter the top 6 apps by average usage
top_6_average_usage = df.nlargest(6, 'Average (Of usage)')

plt.figure(figsize=(12, 8))
bar_plot = sns.barplot(x='App', y='Average (Of usage)', data=top_6_average_usage, palette='coolwarm', edgecolor="black", linewidth=1.5)
bar_plot.set_title('ðŸ‘¥  Daily Usage on Average of Social Media Apps (Sample of 81 Students)', fontsize=18, weight='bold')
bar_plot.set_xlabel('App', fontsize=14, weight='bold')
bar_plot.set_ylabel('Average Daily Usage (Minutes)', fontsize=14, weight='bold')

# Add logos on each bar
for i, app in enumerate(top_6_average_usage['App']):
    if app in logos:
        image_path = logos[app]
        img = plt.imread(image_path)
        imagebox = OffsetImage(img, zoom=0.12)  # Adjusted zoom level to ensure appropriate size
        ab = AnnotationBbox(imagebox, (i, top_6_average_usage['Average (Of usage)'].iloc[i]), frameon=False, box_alignment=(0.5, -0.5))
        plt.gca().add_artist(ab)

plt.grid(True, linestyle='--', alpha=0.6)
plt.tight_layout()
plt.show()

import plotly.graph_objects as go
import pandas as pd
import base64

# Function to encode image to base64
def encode_image(image_file):
    with open(image_file, 'rb') as f:
        return 'data:image/png;base64,' + base64.b64encode(f.read()).decode('ascii')

# Load the images and convert to base64 (assuming they are in the current working directory)
logos = {
    'WhatsApp': encode_image('4102606_applications_media_social_whatsapp_icon.png'),
    'Spotify': encode_image('1298766_spotify_music_sound_icon.png'),
    'Safari/Chrome': encode_image('2993674_brand_brands_logo_logos_safari_icon.png'),
    'Youtube': encode_image('317714_video_youtube_icon.png'),
    'Messages ': encode_image('7763765_messaging_messages_icon.png'),
    'Snapchat': encode_image('4102574_applications_media_snapchat_social_icon.png'),
    'Instagram': encode_image('1298747_instagram_brand_logo_social media_icon.png'),
    'TikTok': encode_image('7024783_tiktok_social media_icon.png'),
    'Netflix': encode_image('4375011_logo_netflix_icon.png')
}

# Load the Excel file
file_path = 'Online Usage.xlsx'
df = pd.read_excel(file_path)

# Filter the data to the top 5 apps by count
df_top5 = df.sort_values('Count', ascending=False).head(5)

# Create the Funnelarea plot
fig = go.Figure(go.Funnelarea(
    text=df_top5['App'],  # Leave this as fallback text
    values=df_top5['Count'],
    title={'text': "Top 5 Apps by User Count"},
    marker=dict(colors=df_top5['App'])
))

# Add logos next to the statistics
for i, app in enumerate(df_top5['App']):
    if app in logos:
        # Calculate x position to alternate images left and right
        x_position = 0.15 + (i * 0.05)  # Adjust horizontally based on index
        fig.add_layout_image(
            dict(
                source=logos[app],
                x=x_position,  # Alternate image position horizontally
                y=1 - (i / 6) - 0.12,  # Lower the position
                sizex=0.1,  # Adjusted size for better fit
                sizey=0.1,
                xanchor="center",  # Center alignment
                yanchor="middle"
            )
        )

# Update layout to make the plot visually appealing
fig.update_layout(
    height=670,  # Height adjusted to better fit the reduced spacing
    width=600,
    title_font_size=24,
    title_x=0.5,
    title_y=0.9,
    title_xanchor='center',
    title_yanchor='top',
    font_family="Arial",
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)',
)

fig.show()

import plotly.express as px
import numpy as np

# Filter the top 5 apps by total usage (including Netflix if it's one of the top apps)
top_5_apps = df.nlargest(5, 'Sum')
top_5_apps['Hours_per_Week'] = top_5_apps['Sum'] * 7 / 60  # Convert minutes per day to hours per week

fig = px.pie(top_5_apps, values='Hours_per_Week', names='App',
             title='ðŸ‘¥  Top 5 Apps by Hours per Week (Sample of 81 Students)',
             labels={'Hours_per_Week': 'Hours per Week'},
             hole=0.3, color_discrete_sequence=px.colors.sequential.RdBu)

# Update the pie chart to show percentages only
fig.update_traces(textinfo='percent')

# Add logos on the pie chart with specific adjustments
for i, (app, hours) in enumerate(zip(top_5_apps['App'], top_5_apps['Hours_per_Week'])):
    if app in logos:
        # Calculate the angle for the center of the slice
        angle = (hours / top_5_apps['Hours_per_Week'].sum()) * 360 / 2 + sum(top_5_apps['Hours_per_Week'][:i]) / top_5_apps['Hours_per_Week'].sum() * 360 - 20

        # Adjust positions for specific icons
        x_adjust = 0
        y_adjust = 0

        if app == 'Snapchat':
            x_adjust = -0.05  # Move to the right
        elif app == 'TikTok':
            x_adjust = -0.05  # Move to the left
        elif app == 'Youtube':
            x_adjust = -0.05  # Move to the left
        elif app == 'Messages ':
            y_adjust = -0.15  # Move downwards (south)

        x_pos = 0.5 + (0.37 + x_adjust) * np.cos(np.radians(angle))  # Adjust x position based on angle
        y_pos = 0.5 + (0.37 + y_adjust) * np.sin(np.radians(angle))  # Adjust y position based on angle

        fig.add_layout_image(
            dict(
                source=logos[app],
                x=x_pos,  # Position based on calculated angle
                y=y_pos,
                sizex=0.1,  # Size remains consistent
                sizey=0.1,
                xanchor="center",
                yanchor="middle"
            )
        )

fig.update_layout(
    title_font_size=20,
    title_x=0.5,
    title_y=0.95,
    title_xanchor='center',
    title_yanchor='top',
    font_family="Arial",
    showlegend=False,  # Remove the legend if needed
    plot_bgcolor='rgba(0,0,0,0)',
    paper_bgcolor='rgba(0,0,0,0)',
)

fig.show()